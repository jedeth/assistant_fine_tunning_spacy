
[paths]
train = "C:\\Users\\jde-thesut\\Documents\\Assistant_fine_tunning_Spacy\\train.spacy"
dev = "C:\\Users\\jde-thesut\\Documents\\Assistant_fine_tunning_Spacy\\dev.spacy"
vectors = "fr_core_news_md"
init_tok2vec = null

[system]
gpu_allocator = null
 # Adaptez si vous utilisez un GPU
seed = 0

[nlp]
lang = "fr"
pipeline = ["tok2vec", "ner"]
batch_size = 1000
tokenizer = {"@tokenizers":"spacy.Tokenizer.v1"}

[components]

[components.tok2vec]
factory = "tok2vec"
source = "fr_core_news_md"
 # On source le tok2vec de base_model
# Pas besoin de la sous-section [components.tok2vec.model] ici,
# car 'source' indique à SpaCy de prendre l'architecture ET les poids du modèle source.

[components.ner]
factory = "ner"
source = "fr_core_news_md"
 # On source le NER de base_model
# Pas besoin de la sous-section [components.ner.model] pour un fine-tuning simple.
# SpaCy utilisera l'architecture du composant NER du modèle source.
# Si vous vouliez une architecture NER différente tout en initialisant avec des poids
# d'un autre modèle, la configuration serait plus complexe.
# Pour le fine-tuning standard, sourcer le composant est la voie.

# La section [components.ner.model.tok2vec] (le listener) est implicitement configurée
# lorsque le composant 'ner' est sourcé et qu'un 'tok2vec' est dans le pipeline.
# Il n'est généralement pas nécessaire de la définir explicitement si la structure est simple.

[corpora]
[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 0
 # 0 signifie pas de limite de longueur pour les documents d'entraînement

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0
 # 0 signifie pas de limite

[training]
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dropout = 0.1
patience = 1600
max_epochs = 0
 # 0 pour un entraînement basé sur max_steps
max_steps = 5000
 # Nombre d'étapes (peut être ajusté)
eval_frequency = 200
frozen_components = []
 # Important : vide pour fine-tuner tok2vec et ner
score_weights = {"ents_f": 1.0}
 # Score principal pour model-best

# Paramètres de l'optimiseur Adam, souvent laissés par défaut pour un premier essai
[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.00000001
learn_rate = 0.001
 # Taux d'apprentissage

# Configuration du batcher
[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2
# get_length = null
#  # Pas nécessaire de le définir explicitement

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001
# t = 0.0
#  # Pas nécessaire de le définir explicitement

[initialize]
vectors = ${paths.vectors}
# init_tok2vec = null
#  # Normalement pas besoin si tok2vec est sourcé.
# Si vous avez des problèmes, commentez cette ligne ou assurez-vous qu'elle est bien null.
# La section [initialize.components] n'est pas nécessaire si le sourcing des composants fonctionne.
    